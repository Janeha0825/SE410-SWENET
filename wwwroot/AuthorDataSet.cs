//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace SwenetDev {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class AuthorDataSet : DataSet {
        
        private AuthorDataTable tableAuthor;
        
        public AuthorDataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected AuthorDataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Author"] != null)) {
                    this.Tables.Add(new AuthorDataTable(ds.Tables["Author"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AuthorDataTable Author {
            get {
                return this.tableAuthor;
            }
        }
        
        public override DataSet Clone() {
            AuthorDataSet cln = ((AuthorDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Author"] != null)) {
                this.Tables.Add(new AuthorDataTable(ds.Tables["Author"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAuthor = ((AuthorDataTable)(this.Tables["Author"]));
            if ((this.tableAuthor != null)) {
                this.tableAuthor.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "AuthorDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/AuthorDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAuthor = new AuthorDataTable();
            this.Tables.Add(this.tableAuthor);
        }
        
        private bool ShouldSerializeAuthor() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void AuthorRowChangeEventHandler(object sender, AuthorRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AuthorDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAuthorID;
            
            private DataColumn columnName;
            
            private DataColumn columnEmail;
            
            internal AuthorDataTable() : 
                    base("Author") {
                this.InitClass();
            }
            
            internal AuthorDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AuthorIDColumn {
                get {
                    return this.columnAuthorID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            public AuthorRow this[int index] {
                get {
                    return ((AuthorRow)(this.Rows[index]));
                }
            }
            
            public event AuthorRowChangeEventHandler AuthorRowChanged;
            
            public event AuthorRowChangeEventHandler AuthorRowChanging;
            
            public event AuthorRowChangeEventHandler AuthorRowDeleted;
            
            public event AuthorRowChangeEventHandler AuthorRowDeleting;
            
            public void AddAuthorRow(AuthorRow row) {
                this.Rows.Add(row);
            }
            
            public AuthorRow AddAuthorRow(string Name, string Email) {
                AuthorRow rowAuthorRow = ((AuthorRow)(this.NewRow()));
                rowAuthorRow.ItemArray = new object[] {
                        null,
                        Name,
                        Email};
                this.Rows.Add(rowAuthorRow);
                return rowAuthorRow;
            }
            
            public AuthorRow FindByAuthorID(int AuthorID) {
                return ((AuthorRow)(this.Rows.Find(new object[] {
                            AuthorID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AuthorDataTable cln = ((AuthorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AuthorDataTable();
            }
            
            internal void InitVars() {
                this.columnAuthorID = this.Columns["AuthorID"];
                this.columnName = this.Columns["Name"];
                this.columnEmail = this.Columns["Email"];
            }
            
            private void InitClass() {
                this.columnAuthorID = new DataColumn("AuthorID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAuthorID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnAuthorID}, true));
                this.columnAuthorID.AutoIncrement = true;
                this.columnAuthorID.AllowDBNull = false;
                this.columnAuthorID.ReadOnly = true;
                this.columnAuthorID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnEmail.AllowDBNull = false;
            }
            
            public AuthorRow NewAuthorRow() {
                return ((AuthorRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AuthorRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AuthorRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AuthorRowChanged != null)) {
                    this.AuthorRowChanged(this, new AuthorRowChangeEvent(((AuthorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AuthorRowChanging != null)) {
                    this.AuthorRowChanging(this, new AuthorRowChangeEvent(((AuthorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AuthorRowDeleted != null)) {
                    this.AuthorRowDeleted(this, new AuthorRowChangeEvent(((AuthorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AuthorRowDeleting != null)) {
                    this.AuthorRowDeleting(this, new AuthorRowChangeEvent(((AuthorRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAuthorRow(AuthorRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AuthorRow : DataRow {
            
            private AuthorDataTable tableAuthor;
            
            internal AuthorRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAuthor = ((AuthorDataTable)(this.Table));
            }
            
            public int AuthorID {
                get {
                    return ((int)(this[this.tableAuthor.AuthorIDColumn]));
                }
                set {
                    this[this.tableAuthor.AuthorIDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableAuthor.NameColumn]));
                }
                set {
                    this[this.tableAuthor.NameColumn] = value;
                }
            }
            
            public string Email {
                get {
                    return ((string)(this[this.tableAuthor.EmailColumn]));
                }
                set {
                    this[this.tableAuthor.EmailColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AuthorRowChangeEvent : EventArgs {
            
            private AuthorRow eventRow;
            
            private DataRowAction eventAction;
            
            public AuthorRowChangeEvent(AuthorRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AuthorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
